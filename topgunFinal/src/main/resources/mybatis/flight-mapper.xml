<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="flight">
	<!-- 등록 -->
	<insert id="add">
		insert into flight(
		flight_id, flight_number,
		departure_time, arrival_time, flight_time,
		departure_airport,
		arrival_airport, user_id, flight_price,
		flight_status
		)
		values(
		flight_seq.nextval, #{flightNumber}, #{departureTime}, #{arrivalTime},
		#{flightTime}, #{departureAirport}, #{arrivalAirport},
		#{userId},
		#{flightPrice}, #{flightStatus}
		)
	</insert>

	<!-- 목록 -->
	<select id="list" resultType="FlightDto">
		select * from flight order by
		flight_id asc
	</select>

	<!-- 상세 -->
	<select id="find" resultType="FlightDto">
		select * from flight where
		flight_id = #{flight_id}
	</select>

	<!-- 수정 -->
	<update id="fix">
		update flight
		set flight_number = #{flightNumber},
		departure_time = #{departureTime},
		arrival_time = #{arrivalTime},
		flight_time = #{flightTime},
		departure_airport = #{departureAirport},
		arrival_airport = #{arrivalAirport},
		flight_price = #{flightPrice},
		flight_status = #{flightStatus}
		where flight_id = #{flightId}
	</update>

	<!-- 삭제 -->
	<delete id="del">
		delete flight where flight_id = #{flightId}
	</delete>

	<!-- 검색 -->
	<select id="search" resultType="FlightDto">
	    <![CDATA[
	        select * from flight
			where instr(${column}, #{keyword}) > 0
			order by ${column} asc
	    ]]>
	</select>

	<select id="list2" resultMap="flightVOMap">
		SELECT
		f.flight_id,
		f.flight_number,
		f.departure_time,
		f.arrival_time,
		f.flight_time,
		f.departure_airport,
		f.arrival_airport,
		f.user_id,
		f.flight_price,
		f.flight_status,
		a.airline_name
		FROM flight f
		JOIN airline a
		ON f.user_id = a.user_id
	</select>

	<!-- resultMap을 이용하여 airline_name을 AirlineDto에 매핑 -->
	<resultMap id="flightVOMap" type="FlightVO">
		<id property="flightId" column="flight_id" />
		<result property="flightNumber" column="flight_number" />
		<result property="departureTime" column="departure_time" />
		<result property="arrivalTime" column="arrival_time" />
		<result property="flightTime" column="flight_time" />
		<result property="departureAirport" column="departure_airport" />
		<result property="arrivalAirport" column="arrival_airport" />
		<result property="userId" column="user_id" />
		<result property="flightPrice" column="flight_price" />
		<result property="flightStatus" column="flight_status" />

		<!-- AirlineDto와의 association 설정 -->
		<association property="airlineDto"
			javaType="com.kh.topgunFinal.dto.AirlineDto">
			<result property="airlineName" column="airline_name" />
		</association>
	</resultMap>
	
			<!--  복합 검색을 위한 코드 -->
			<select id="complexFlightSearch" resultType="FlightVO">
			<include refid="top-n-header"></include>
			    SELECT * FROM flight
			    <where>
			        <!-- 출발지 검색 조건 -->
			        <if test="departureAirport != null and departureAirport != ''">
			            AND departure_airport = #{departureAirport}
			        </if>
			        
			        <!-- 도착지 검색 조건 -->
			        <if test="arrivalAirport != null and arrivalAirport != ''">
			            AND arrival_airport = #{arrivalAirport}
			        </if>
			        
			        <!-- 날짜 검색 조건 -->
			        <if test="departureTime != null">
			            <![CDATA[
			            AND TO_CHAR(departure_time, 'YYYY-MM-DD') = #{departureTime}
			            ]]>
			        </if>
			        
			        <!-- 인원수 검색 조건 -->
			        <if test="passengers != null and passengers > 0">
			            <!-- 좌석 관련 로직 추가 가능 -->
			            
			        </if>
			        
			    </where>
			    
			    <!-- 정렬 처리 -->
			    <choose>
			        <when test="orderList != null and orderList.size() > 0">
			            ORDER BY
			            <foreach item="orderItem" collection="orderList" separator=",">
			                ${orderItem}
			            </foreach>
			        </when>
			        <otherwise>
			            ORDER BY departure_time ASC
			        </otherwise>
			    </choose>
			    <include refid="top-n-footer"></include>
			</select>
			

			<sql id="top-n-header">
				<if test="beginRow != null and endRow != null">
				select * from (
		  			select rownum rn, TMP.* from(
		  		</if>
			</sql>
			<sql id="top-n-footer">
				<if test="beginRow != null and endRow != null">
				 	)TMP
				)
				where rn between #{beginRow} and #{endRow}
				</if>
			</sql>

</mapper>